#!/usr/bin/env python3

import time
import json
import logging
import configparser
from datetime import datetime

logging.basicConfig(level=logging.DEBUG)

logging.info("Pool pH and temperature meter.")

from atlas import AtlasPH_I2C
from temperature import Temperature
from mqtt import MQTT

try:
    config_ini = sys.argv[1]
except:
    config_ini = "config.ini"

if __name__ == "__main__":
    config = configparser.ConfigParser()
    config.read(config_ini)

    mqtt = MQTT(config['mqtt'])
    temp_sensors = Temperature(config['temperature'])
    ph_sensor = AtlasPH_I2C(
        address = int(config['ph']['addr'], 0),
        bus = int(config['ph']['bus'], 0)
    )

    last_ph = 0
    while True:
        time_start = time.time()
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        # Measure and send Temperature in every iteration
        result = {
            '_timestamp': timestamp
        }
        result['temperature'] = temp_sensors.read_all()
        print(result, flush=True)
        mqtt.publish(config['temperature']['topic'], json.dumps(result))

        # Measure and send pH if time is up
        if last_ph < time.time() - int(config['ph']['rate_sec']):
            result = {
                '_timestamp': timestamp
            }
            # Only measure pH every 'ph_rate_sec' seconds
            result['ph'] = ph_sensor.read_ph()
            last_ph = time.time()
            print(result, flush=True)
            mqtt.publish(config['ph']['topic'], json.dumps(result))

        # Compensate for the variable processing times
        time_spent = time.time() - time_start
        time.sleep(60 - time_spent % 60)
